---
import { languages, getLangFromUrl } from '../utils/i18n';

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname.replace(`/${currentLang}`, '') || '/';
---

<div class="language-selector relative">
  <button 
    id="lang-btn" 
    class="flex items-center gap-2 px-3 py-2 rounded-lg bg-dark-lighter hover:bg-dark-lighter/80 transition-all duration-300 border border-gray-700 hover:border-primary"
    aria-label="Seleccionar idioma"
  >
    <svg class="w-5 h-5 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    <span class="text-sm font-medium text-gray-300 uppercase">{currentLang}</span>
    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>

  <div 
    id="lang-menu" 
    class="absolute right-0 mt-2 w-40 rounded-lg bg-dark border border-gray-700 shadow-xl opacity-0 invisible transition-all duration-300 z-50"
  >
    {Object.entries(languages).map(([lang, label]) => (
      <a
        href={lang === 'es' ? currentPath : `/${lang}${currentPath}`}
        class={`block px-4 py-3 text-sm transition-colors duration-200 first:rounded-t-lg last:rounded-b-lg ${
          lang === currentLang
            ? 'bg-primary/20 text-primary font-semibold'
            : 'text-gray-300 hover:bg-dark-lighter hover:text-white'
        }`}
        data-lang={lang}
      >
        <div class="flex items-center gap-2">
          <span class="text-lg">{lang === 'es' ? 'ðŸ‡ªðŸ‡¸' : 'ðŸ‡¬ðŸ‡§'}</span>
          <span>{label}</span>
        </div>
      </a>
    ))}
  </div>
</div>

<script>
  const langBtn = document.getElementById('lang-btn');
  const langMenu = document.getElementById('lang-menu');

  langBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    langMenu?.classList.toggle('opacity-0');
    langMenu?.classList.toggle('invisible');
    langMenu?.classList.toggle('opacity-100');
    langMenu?.classList.toggle('visible');
  });

  // Cerrar al hacer click fuera
  document.addEventListener('click', (e) => {
    if (!langMenu?.contains(e.target as Node) && !langBtn?.contains(e.target as Node)) {
      langMenu?.classList.add('opacity-0', 'invisible');
      langMenu?.classList.remove('opacity-100', 'visible');
    }
  });

  // Prevenir que el menÃº se cierre al hacer click dentro
  langMenu?.addEventListener('click', (e) => {
    e.stopPropagation();
  });
</script>

<style>
  .language-selector {
    @apply inline-block;
  }
</style>

