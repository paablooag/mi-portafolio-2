---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FloatingButtons from '../../components/FloatingButtons.astro';
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from '../../utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const allPosts = await getCollection('blog', ({ data }) => {
  return data.draft !== true;
});

const sortedPosts = allPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Obtener todas las categor칤as 칰nicas
const allCategories = [...new Set(allPosts.flatMap(post => post.data.tags))].sort();

// Mapeo de categor칤as a las claves de traducci칩n
const categoryMap: Record<string, string> = {
  'Vue.js': 'vue',
  'Nuxt.js': 'nuxt',
  'JavaScript': 'javascript',
  'SEO': 'seo',
  'Frontend': 'frontend',
  'CSS': 'css',
  'Git': 'git',
  'Testing': 'testing',
  'Performance': 'performance',
  'Accessibility': 'accessibility',
  'Design': 'design',
  'Tools': 'tools'
};

function formatDate(date: Date): string {
  return new Date(date).toLocaleDateString('es-ES', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<Layout 
  title="Blog - Pablo Alcalde | Frontend & SEO | Art칤culos sobre Vue.js, Nuxt.js y Desarrollo Web"
  description="Art칤culos sobre desarrollo frontend, Vue.js, Nuxt.js, SEO y las 칰ltimas tendencias en tecnolog칤a web. Experiencias reales de desarrollo en Wegow y mejores pr치cticas."
  tags={["blog", "desarrollo frontend", "Vue.js", "Nuxt.js", "SEO", "JavaScript", "TypeScript", "tutoriales", "mejores pr치cticas"]}
>
  <Header />
  
  <main class="pt-24">
    <section class="section">
      <div class="container-custom">
        <!-- Hero del Blog -->
        <div class="text-center mb-16">
          <h1 class="text-5xl md:text-6xl font-bold mb-4">
            {t('blog.title')} <span class="gradient-text">{t('blog.titleHighlight')}</span>
          </h1>
          <p class="text-xl text-gray-400 max-w-2xl mx-auto">
            {t('blog.subtitle')}
          </p>
        </div>

        <!-- Filtros -->
        <div class="mb-12">
          <h2 class="text-lg font-semibold mb-4 text-gray-300">{t('blog.filters.title')}</h2>
          <div class="flex flex-wrap gap-3">
            <button 
              data-filter="all" 
              class="filter-btn active px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-primary text-white hover:bg-secondary"
            >
              {t('blog.filters.all')}
              <span class="ml-2 text-xs opacity-75">({sortedPosts.length})</span>
            </button>
            {allCategories.map((category: string) => {
              const count = sortedPosts.filter(post => post.data.tags.includes(category)).length;
              const filterKey = categoryMap[category as keyof typeof categoryMap] || category.toLowerCase();
              return (
                <button 
                  data-filter={category} 
                  class="filter-btn px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 bg-gray-800 text-gray-300 hover:bg-gray-700 hover:text-white"
                >
                  {t(`blog.filters.${filterKey}`) || category}
                  <span class="ml-2 text-xs opacity-75">({count})</span>
                </button>
              );
            })}
          </div>
        </div>

        <!-- Contador de resultados -->
        <div class="mb-6">
          <p id="results-count" class="text-gray-400 text-sm">
            {t('blog.showingResults').replace('{count}', sortedPosts.length.toString())}
          </p>
        </div>

        <!-- Grid de art칤culos -->
        <div id="articles-grid" class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {sortedPosts.map((post) => (
            <article class="blog-post card group hover:scale-[1.02] transition-all duration-300" data-tags={post.data.tags.join(',')}>
              <div class="mb-4">
                <div class="flex flex-wrap gap-2 mb-3">
                  {post.data.tags.map((tag) => (
                    <span class="post-tag text-xs px-3 py-1 bg-primary/20 text-primary rounded-full">
                      {tag}
                    </span>
                  ))}
                </div>
                <h2 class="text-xl font-bold text-white mb-2 group-hover:text-primary transition-colors">
                  <a href={`/blog/${post.slug}`}>
                    {post.data.title}
                  </a>
                </h2>
                <p class="text-gray-400 text-sm mb-3">
                  {post.data.description}
                </p>
                <div class="flex items-center gap-2 text-gray-500 text-xs mb-4">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                  </svg>
                  <time datetime={post.data.pubDate.toISOString()}>
                    {formatDate(post.data.pubDate)}
                  </time>
                </div>
              </div>
              <a 
                href={`/blog/${post.slug}`}
                class="inline-flex items-center gap-2 text-primary hover:gap-3 transition-all duration-300"
              >
                {t('blog.readMore')}
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </article>
          ))}
        </div>

        <!-- Mensaje si no hay resultados -->
        <div id="no-results" class="card text-center py-12 hidden">
          <div class="mb-4 text-5xl">游댌</div>
          <p class="text-gray-400 text-lg mb-2">
            {t('blog.noResults')}
          </p>
          <button id="reset-filters" class="mt-4 text-primary hover:text-secondary transition-colors">
            {t('blog.filters.all')}
          </button>
        </div>
      </div>
    </section>
  </main>

  <Footer />
  <FloatingButtons />
</Layout>

<script>
  const filterButtons = document.querySelectorAll('.filter-btn');
  const blogPosts = document.querySelectorAll('.blog-post');
  const resultsCount = document.getElementById('results-count');
  const noResults = document.getElementById('no-results');
  const articlesGrid = document.getElementById('articles-grid');
  const resetButton = document.getElementById('reset-filters');
  
  // Textos de traducci칩n (inyectados desde el servidor)
  const lang = document.documentElement.lang || 'es';
  const showingText = lang === 'es' ? 'Mostrando {count} art칤culos' : 'Showing {count} articles';

  function filterPosts(category: string) {
    let visibleCount = 0;
    
    blogPosts.forEach((post) => {
      const tags = (post as HTMLElement).dataset.tags?.split(',') || [];
      
      if (category === 'all' || tags.includes(category)) {
        (post as HTMLElement).style.display = 'block';
        setTimeout(() => {
          (post as HTMLElement).style.opacity = '1';
          (post as HTMLElement).style.transform = 'scale(1)';
        }, 10);
        visibleCount++;
      } else {
        (post as HTMLElement).style.opacity = '0';
        (post as HTMLElement).style.transform = 'scale(0.95)';
        setTimeout(() => {
          (post as HTMLElement).style.display = 'none';
        }, 300);
      }
    });
    
    // Actualizar contador
    if (resultsCount) {
      resultsCount.textContent = showingText.replace('{count}', visibleCount.toString());
    }
    
    // Mostrar/ocultar mensaje de sin resultados
    if (noResults && articlesGrid) {
      if (visibleCount === 0) {
        articlesGrid.style.display = 'none';
        noResults.classList.remove('hidden');
      } else {
        articlesGrid.style.display = 'grid';
        noResults.classList.add('hidden');
      }
    }
  }

  // Event listeners para botones de filtro
  filterButtons.forEach((button) => {
    button.addEventListener('click', () => {
      // Remover clase active de todos los botones
      filterButtons.forEach((btn) => {
        btn.classList.remove('active', 'bg-primary', 'text-white');
        btn.classList.add('bg-gray-800', 'text-gray-300');
      });
      
      // A침adir clase active al bot칩n clickeado
      button.classList.add('active', 'bg-primary', 'text-white');
      button.classList.remove('bg-gray-800', 'text-gray-300');
      
      // Filtrar posts
      const category = (button as HTMLElement).dataset.filter || 'all';
      filterPosts(category);
    });
  });

  // Event listener para bot칩n reset
  if (resetButton) {
    resetButton.addEventListener('click', () => {
      const allButton = document.querySelector('[data-filter="all"]');
      if (allButton) {
        (allButton as HTMLElement).click();
      }
    });
  }

  // Estilos para transiciones suaves
  blogPosts.forEach((post) => {
    (post as HTMLElement).style.transition = 'opacity 0.3s ease, transform 0.3s ease';
  });
</script>


